Aim: Socket to me

Sockets (sys/socket.h, sys/types.h)
- A socket is a network connection between two programs.
- A socket has 2 ends, each one consisting of an IP Address/Port pair.
- To use a socket:
  1. create the socket
  2. bind it to an address and port
  3. listen/initiate a connection
  4. send/receive data

socket <sys/socket.h>
- Creates a socket
- Returns a socket descriptor (int that works like a file descriptor)
- socket( <domain>, <type>, <protocol> )
    * domain: type of address (IPv4, IPv6...)
        - AF_INET: IPv4
    * type: tcp/udp
        - SOCK_STREAM: tcp
	- SOCK_DGRAM: udp
    * protocol: combination of domain and type settings
        - If set to 0 the OS will set to correct protocol
    * example:
        int sd = socket( AF_INET, SOCK_STREAM, 0 );

bind <sys/socket.h>
- Binds the socket to an address and port.
- Returns 0 (success) or -1 (failure)
- A server might bind to any incoming address but only a specific port, whereas a client would bind to a specific address and port
- bind ( <socket descriptor>, <address>, <address length> )
    * socket descriptor: return value of socket
    * address: pointer to a struct sockaddr_in (sttruct sockaddr_in6 for IPv6)
        - sin_family: address domain (e.g. AF_INET)
	- sin_addr: IP address in binary
	    * sin_addr.s_addr = INADDR_ANY; // any local IP address / any incoming connection (often used by servers)
	    * inet_aton( <string>, <address variable> ) // for client?
	        - <arpa/inet.h>
	        - will convert a string representing an ip address to the correct format and place it in the second parameter
        - sin_port: port to bind to
	    * htons( int )
	      * returns the port in the correct order
	      * big endian: most significant byte first

listen (server only) <sys/socket.h>
- TCP server will listen to a socket and wait for an incoming connection
- listen( <socket descriptor>, <queue length> );
  * socket descriptor: return value of socket
  * queue: number of connections that can wait; doesn't work anymore
  * returns 0 or -1 on success/failure

accept (server only) <sys/socket.h>
- Set up a TCP connection
- Handles the required 3 way handshake
- A complete socket has 5 pieces of information, IP address and port # for both client and server, and protocol (tcp/udp)
- Once a client connection gets past listen(), accept creates a new socket with the client information added, and returns a descriptor to the new socket
- Returns the socket descriptor of the new socket
- accept( <socket descriptor>, <socket address>, <address length>)
  * socket descriptor: return value of socket
  * address: pointer to a struct sockaddr
      - will contain the correct address information after the connection is made
  * address length: pointer to a variable with the size of the address; will be set after connection is made
Aim: Get more power from your sockets

connect (client only) <sys/socket.h> <sys/types.h>
- Connect to another program over a socket
- Handles the client end of the 3 way handshake
- Does not create a new socket
- connect( <socket descriptor>, <address>, <address size )
  * address struct is the same as in bind

UDP:
- Instead of reading and writing using socket descriptors, use sendto() and recvfrom()